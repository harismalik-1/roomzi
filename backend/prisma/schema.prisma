generator client {
  provider = "prisma-client-js"
}

/// @seed="node prisma/seed.js"

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model chats {
  id                 String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenant_id          String
  landlord_id        String
  property_id        String
  created_at         DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  tenant_name        String?
  property_name      String?
  landlord_name      String?
  landlord_last_read DateTime?  @db.Timestamptz(6)
  tenant_last_read   DateTime?  @db.Timestamptz(6)
  messages           messages[]
}

model landlord_profiles {
  id                          String             @id @db.Uuid
  full_name                   String
  email                       String
  phone                       String?
  image_url                   String?
  address                     String?
  created_at                  DateTime           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at                  DateTime           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  documents                   Json[]             @default([])
  rentReminderDays            Int                @default(3)
  viewingRequestNotifications Boolean            @default(true)
  listings                    listings[]
  payment_requests            payment_requests[]
  viewingRequest              viewingRequest[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model listings {
  id                BigInt             @id @default(autoincrement())
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  landlord_id       String?            @db.Uuid
  tenant_id         String?            @db.Uuid
  title             String?
  type              String?            @db.VarChar
  address           String?
  city              String?
  state             String?
  zip_code          String?            @db.VarChar
  bedrooms          Int?               @db.SmallInt
  bathrooms         Int?               @db.SmallInt
  area              Float?
  price             Float?
  description       String?
  lease_type        String?            @db.VarChar
  amenities         String[]
  requirements      String?
  house_rules       String?
  images            String?
  landlord_name     String?
  landlord_phone    String?            @db.VarChar
  coordinates       String?
  available         Boolean?
  leases            leases[]
  landlord_profiles landlord_profiles? @relation(fields: [landlord_id], references: [id], onDelete: Cascade)
  tenant_profiles   tenant_profiles?   @relation(fields: [tenant_id], references: [id], onDelete: SetDefault)
  viewingRequest    viewingRequest[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model messages {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chat_id     String   @db.Uuid
  sender_id   String
  content     String
  sender_type String
  created_at  DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  reply_to_id String?  @db.Uuid
  chats       chats    @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tenant_profiles {
  id             String           @id @db.Uuid
  full_name      String
  email          String
  phone          String?
  image_url      String?
  address        String?
  created_at     DateTime         @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at     DateTime         @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  documents      Json[]           @default([])
  viewingRequestNotifications Boolean            @default(true)
  rentReminderDays            Int                @default(3)
  // Preference fields for filtering listings
  preferredHouseTypes         String[]           @default([]) // Array of house types: room, apartment, house, condo
  preferredRentMin            Float?             // Minimum rent preference
  preferredRentMax            Float?             // Maximum rent preference
  preferredDistance           Float?             // Maximum distance in miles from current location
  leases         leases[]
  listings       listings[]
  viewingRequest viewingRequest[]
}

model payment_requests {
  id                Int                @id @default(autoincrement())
  listingId         BigInt
  amount            Float
  date              DateTime           @default(now())
  status            String
  proofUrl          String?
  month             String?
  tenantId          String             @db.Uuid
  listing_id        String?            @db.Uuid
  landlord_profiles landlord_profiles? @relation(fields: [listing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model maintenance_requests {
  id              Int      @id @default(autoincrement())
  listingId       BigInt
  description     String
  images          String[]
  status          String   @default("Pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  landlordcomment String?
  tenantId        String   @db.Uuid
  landlordId      String   @db.Uuid
}

model leases {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  tenant_id       String?          @db.Uuid
  listing_id      BigInt?
  start_date      DateTime?        @db.Date
  end_date        DateTime?        @db.Date
  rent            Float?
  signed          Boolean          @default(false)
  document        String?
  landlordseen    Boolean?         // Preserve existing data
  listings        listings?        @relation(fields: [listing_id], references: [id], onDelete: NoAction)
  tenant_profiles tenant_profiles? @relation(fields: [tenant_id], references: [id], onDelete: NoAction)
}

model viewingRequest {
  id                Int               @id @default(autoincrement())
  propertyId        BigInt
  tenantId          String            @db.Uuid
  landlordId        String            @db.Uuid
  requestedDateTime DateTime
  proposedDateTime  DateTime?
  status            String            @default("Pending")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  landlord_profiles landlord_profiles @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  listings          listings          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant_profiles   tenant_profiles   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
